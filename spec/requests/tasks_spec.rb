require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { title: 'MyString' }
  end

  let(:invalid_attributes) do
    { title: nil }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Task.create! valid_attributes
      get api_v1_tasks_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it 'returns an ordered list of tasks based on row_order' do
      task1 = Task.create! title: 'Task 1', row_order: 1
      task2 = Task.create! title: 'Task 2', row_order: 3
      task3 = Task.create! title: 'Task 3', row_order: 2

      get api_v1_tasks_url, headers: valid_headers, as: :json

      expect(JSON.parse(response.body).first['title']).to eq(task1.title)
      expect(JSON.parse(response.body).last['title']).to eq(task2.title)
    end

    it 'returns paginated tasks' do
      4.times do
        Task.create! valid_attributes
      end

      get api_v1_tasks_url, params: { page: 1, per_page: 2 }, headers: valid_headers

      expect(JSON.parse(response.body).length).to eq(2)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      task = Task.create! valid_attributes
      get api_v1_task_url(task), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Task' do
        expect do
          post api_v1_tasks_url,
               params: { task: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Task, :count).by(1)
      end

      it 'renders a JSON response with the new task' do
        post api_v1_tasks_url,
             params: { task: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Task' do
        expect do
          post api_v1_tasks_url,
               params: { task: invalid_attributes }, as: :json
        end.to change(Task, :count).by(0)
      end

      it 'renders a JSON response with errors for the new task' do
        post api_v1_tasks_url,
             params: { task: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { title: 'updated' }
      end

      it 'updates the requested task' do
        task = Task.create! valid_attributes
        patch api_v1_task_url(task),
              params: { task: new_attributes }, headers: valid_headers, as: :json
        task.reload
        expect(task.title).to eq('updated')
      end

      it 'renders a JSON response with the task' do
        task = Task.create! valid_attributes
        patch api_v1_task_url(task),
              params: { task: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the task' do
        task = Task.create! valid_attributes
        patch api_v1_task_url(task),
              params: { task: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested task' do
      task = Task.create! valid_attributes
      expect do
        delete api_v1_task_url(task), headers: valid_headers, as: :json
      end.to change(Task, :count).by(-1)
    end
  end

  describe 'PATCH /move' do
    it 'moves the task' do
      task_one = Task.create! valid_attributes
      task_two = Task.create! valid_attributes
      task_three = Task.create! valid_attributes

      patch move_api_v1_task_url(task_three), params: { position: 1 }, headers: valid_headers, as: :json
      expect(response).to have_http_status(:ok)
      expect(task_three.reload.row_order).to be > (task_one.reload.row_order)
      expect(task_three.reload.row_order).to be < (task_two.reload.row_order)
    end

    it 'renders a JSON response with the task' do
      task = Task.create! valid_attributes
      patch move_api_v1_task_url(task), params: { position: 1 }, headers: valid_headers, as: :json
      expect(response).to have_http_status(:ok)
      expect(response.content_type).to match(a_string_including('application/json'))
    end

    it 'requires a position params' do
      task = Task.create! valid_attributes
      patch move_api_v1_task_url(task), headers: valid_headers, as: :json
      expect(response).to have_http_status(:bad_request)
    end
  end
end
